[
  {
    "endpoint": "/search",
    "description": "Search for cryptocurrencies by name, symbol, or contract address",
    "parameters": [
      {
        "name": "input",
        "description": "Name, symbol, contract address of the asset / pair / wallet",
        "type": "string",
        "example": "bitcoin",
        "required": true
      },
      {
        "name": "blockchain",
        "description": "Blockchain to search on",
        "type": "string",
        "example": "Ethereum"
      },
      {
        "name": "blockchains",
        "description": "Blockchains to search on (comma separated)",
        "type": "string",
        "example": "Ethereum,56"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/metadata",
    "description": "Get metadata for an asset",
    "parameters": [
      {
        "name": "asset",
        "description": "Name or contract address of the asset",
        "type": "string",
        "example": "Bitcoin",
        "required": true
      },
      {
        "name": "blockchain",
        "description": "Blockchain of the asset",
        "type": "string",
        "example": "Ethereum"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/multi-metadata",
    "description": "Get metadata for multiple assets",
    "parameters": [
      {
        "name": "assets",
        "description": "Name or contract address of the assets",
        "type": "string",
        "example": "Bitcoin",
        "required": true
      },
      {
        "name": "blockchains",
        "description": "Blockchains of the assets",
        "type": "string",
        "example": "Ethereum"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/metadata/listings",
    "description": "Fetch latest listings on Mobula curated dataset",
    "parameters": [],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/metadata/news",
    "description": "Fetch latest news on the crypto market",
    "parameters": [],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/metadata/trendings",
    "description": "Retrieve all tokens trending on all platforms",
    "parameters": [
      {
        "name": "platform",
        "description": "The platform to fetch trending assets from",
        "type": "string",
        "example": "dextools"
      },
      {
        "name": "blockchain",
        "description": "The blockchain to fetch trending assets from",
        "type": "string",
        "example": "ethereum"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/blockchains",
    "description": "Retrieve all blockchains available on Mobula",
    "parameters": [],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/data",
    "description": "Get the market metrics for any asset",
    "parameters": [
      {
        "name": "asset",
        "description": "The asset you want to target - asset name only works for assets listed on Mobula",
        "type": "string",
        "example": "Bitcoin",
        "required": true
      },
      {
        "name": "blockchain",
        "description": "Blockchain of the asset - only mandatory if asset is sent as smart-contract",
        "type": "string"
      },
      {
        "name": "symbol",
        "description": "Symbol of the asset - only mandatory if no asset name/contract is provided",
        "type": "string",
        "example": "BTC"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/multi-data",
    "description": "Fetch market data for multiple assets simultaneously",
    "parameters": [
      {
        "name": "assets",
        "description": "Comma separated list of asset names or Ethereum addresses (max 500)",
        "type": "string",
        "required": false
      },
      {
        "name": "blockchains",
        "description": "Comma separated list of blockchain names",
        "type": "string",
        "required": false
      },
      {
        "name": "symbols",
        "description": "Comma separated list of symbols",
        "type": "string",
        "required": false
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/history",
    "description": "Get the market metrics of an asset over a given timeframe",
    "parameters": [
      {
        "name": "blockchain",
        "description": "Blockchain of the asset - only mandatory if asset is sent as smart-contract",
        "type": "string"
      },
      {
        "name": "asset",
        "description": "The asset you want to target - asset name only works for assets listed on Mobula",
        "type": "string",
        "required": true
      },
      {
        "name": "from",
        "description": "JS Timestamp (milliseconds) of the beginning of the timeframe",
        "type": "timestamp"
      },
      {
        "name": "to",
        "description": "JS Timestamp (milliseconds) of the end of the timeframe",
        "type": "timestamp"
      },
      {
        "name": "period",
        "description": "The resolution of the market history",
        "type": "string",
        "options": ["5min", "15min", "1h"],
        "example": "5min"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/multi-history",
    "description": "Fetch market history for multiple assets",
    "parameters": [
      {
        "name": "assets",
        "description": "Comma separated list of asset names or Ethereum addresses (max 500)",
        "type": "string",
        "required": true
      },
      {
        "name": "from",
        "description": "JS Timestamp (milliseconds) of the beginning of the timeframe",
        "type": "timestamp"
      },
      {
        "name": "to",
        "description": "JS Timestamp (milliseconds) of the end of the timeframe",
        "type": "timestamp"
      },
      {
        "name": "froms",
        "description": "Comma separated list of from timestamps",
        "type": "string"
      },
      {
        "name": "tos",
        "description": "Comma separated list of to timestamps",
        "type": "string"
      },
      {
        "name": "symbols",
        "description": "Comma separated list of symbols",
        "type": "string"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/pair",
    "description": "Get the market metrics for any DEX pair",
    "parameters": [
      {
        "name": "blockchain",
        "description": "Blockchain of the pair (only mandatory for Balancer V2 pairs)",
        "type": "string",
        "example": "Mantle"
      },
      {
        "name": "address",
        "description": "The address of the smart-contract of the pair (or pool, or vault)",
        "type": "string",
        "example": "0x6488f911c6cd86c289aa319c5a826dcf8f1ca065",
        "required": true
      },
      {
        "name": "asset",
        "description": "The name/address of the asset you want in return",
        "type": "string",
        "example": "Tether"
      },
      {
        "name": "stats",
        "description": "If market stats should be included",
        "type": "boolean",
        "example": true
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/wallet/nfts",
    "description": "Get NFTs in a wallet",
    "parameters": [
      {
        "name": "wallet",
        "description": "Wallet address or ENS or Mobula username",
        "type": "string",
        "example": "0x554efD74C693999bABf7CC0f5646D465A31b32CB",
        "required": true
      },
      {
        "name": "force",
        "description": "Will force a new on-chain data fetch",
        "type": "boolean"
      },
      {
        "name": "blockchains",
        "description": "Blockchains to fetch NFTs from (by default, all) - comma separated, chain ID or chain name",
        "type": "string",
        "example": "56,Ethereum"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/wallet/portfolio",
    "description": "Get the portfolio of holdings from any wallets",
    "parameters": [
      {
        "name": "wallet",
        "description": "The user wallet queried",
        "type": "string",
        "example": "0xf23b38099188fd5892346104bBEF2F1c11D10244"
      },
      {
        "name": "wallets",
        "description": "The user wallets queried (comma separated)",
        "type": "string",
        "example": "0xf23b38099188fd5892346104bBEF2F1c11D10244,0x554efD74C693999bABf7CC0f5646D465A31b32CB"
      },
      {
        "name": "blockchains",
        "description": "Blockchains to fetch holdings from (by default, all) - comma separated, chain ID or chain name",
        "type": "string",
        "example": "56,Ethereum"
      },
      {
        "name": "cache",
        "description": "Will use cached data if available",
        "type": "boolean"
      },
      {
        "name": "stale",
        "description": "Amount of seconds after which the cache is considered stale (default 5min)",
        "type": "number"
      },
      {
        "name": "unlistedAssets",
        "description": "Include unlisted assets in the response",
        "type": "boolean"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/wallet/multi-portfolio",
    "description": "Get the portfolio of holdings from multiple wallets",
    "parameters": [
      {
        "name": "wallets",
        "description": "The user wallets queried (comma separated)",
        "type": "string",
        "example": "0xf23b38099188fd5892346104bBEF2F1c11D10244,0x554efD74C693999bABf7CC0f5646D465A31b32CB",
        "required": true
      },
      {
        "name": "blockchains",
        "description": "Blockchains to fetch holdings from (by default, all) - comma separated, chain ID or chain name",
        "type": "string",
        "example": "56,Ethereum"
      },
      {
        "name": "cache",
        "description": "Will use cached data if available",
        "type": "boolean"
      },
      {
        "name": "stale",
        "description": "Amount of seconds after which the cache is considered stale (default 5min)",
        "type": "number"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/wallet/defi-positions",
    "description": "Get DeFi positions for a wallet",
    "parameters": [
      {
        "name": "wallet",
        "description": "Wallet address",
        "type": "string",
        "example": "0xC88B2264D3AC0456A4863Bf021dE4E8EE1129A6b",
        "required": true
      },
      {
        "name": "blockchains",
        "description": "Blockchains to fetch DeFi positions from (by default, all) - comma separated, chain ID or chain name",
        "type": "string",
        "example": "Scroll"
      },
      {
        "name": "protocol",
        "description": "Protocol to filter DeFi positions from (by default all protocols)",
        "type": "string",
        "example": "uniswap-v3"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/wallet/history",
    "description": "Get the historical balance of any wallets",
    "parameters": [
      {
        "name": "wallet",
        "description": "The user wallet queried",
        "type": "string",
        "example": "0xf23b38099188fd5892346104bBEF2F1c11D10244"
      },
      {
        "name": "wallets",
        "description": "The user wallets queried (comma separated)",
        "type": "string",
        "example": "0xf23b38099188fd5892346104bBEF2F1c11D10244,0x554efD74C693999bABf7CC0f5646D465A31b32CB"
      },
      {
        "name": "from",
        "description": "JS Timestamp (milliseconds) of the beginning of the timeframe",
        "type": "timestamp"
      },
      {
        "name": "to",
        "description": "JS Timestamp (milliseconds) of the end of the timeframe",
        "type": "timestamp"
      },
      {
        "name": "blockchains",
        "description": "Blockchains to fetch history from (by default, all) - comma separated, chain ID or chain name",
        "type": "string",
        "example": "56,Ethereum"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/warehouse/contract-deployer",
    "description": "Get the deployer address for a contract",
    "parameters": [
      {
        "name": "contractAddress",
        "description": "Address of the contract",
        "type": "string",
        "example": "0x0000000000000000000000000000000000000000",
        "required": true
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/warehouse/wallet-transactions-count",
    "description": "Get the transaction count for a wallet",
    "parameters": [
      {
        "name": "walletAddress",
        "description": "Address of the wallet",
        "type": "string",
        "example": "0x0000000000000000000000000000000000000000",
        "required": true
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/blockchain/query",
    "description": "Query a blockchain with SQL",
    "parameters": [
      {
        "name": "sql",
        "description": "SQL query to execute",
        "type": "string",
        "example": "SELECT * FROM assets WHERE symbol = 'ETH'",
        "required": true
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/blockchain/decode",
    "description": "Decode a blockchain transaction",
    "parameters": [
      {
        "name": "abi",
        "description": "ABI of the contract",
        "type": "object",
        "example": {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "deposit",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        "required": true
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/sparkline",
    "description": "Get the 24h sparkline url for an asset",
    "parameters": [
      {
        "name": "asset",
        "description": "Asset to get sparkline for",
        "type": "string",
        "required": true
      },
      {
        "name": "png",
        "description": "Return PNG format instead of SVG",
        "type": "boolean"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/token/holders",
    "description": "Get the token holders for any asset",
    "parameters": [
      {
        "name": "asset",
        "description": "The asset you want to target - asset name only works for assets listed on Mobula",
        "type": "string",
        "required": true
      },
      {
        "name": "blockchain",
        "description": "The blockchain of the asset",
        "type": "string"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/query/token",
    "description": "Query market tokens with filters",
    "parameters": [
      {
        "name": "filters",
        "description": "List of filters to apply (e.g., volume_24h)",
        "type": "string",
        "example": "volume_24h:100:1000"
      },
      {
        "name": "sortBy",
        "description": "Field to sort by (volume_24h, listed_at)",
        "type": "string",
        "example": "volume_24h"
      },
      {
        "name": "sortOrder",
        "description": "Sort order (asc, desc)",
        "type": "string",
        "example": "desc"
      },
      {
        "name": "offset",
        "description": "The offset of the results",
        "type": "integer",
        "example": 0
      },
      {
        "name": "limit",
        "description": "The limit of the results",
        "type": "integer",
        "default": 20
      },
      {
        "name": "unlistedAssets",
        "description": "Include unlisted assets",
        "type": "boolean",
        "default": true
      },
      {
        "name": "blockchain",
        "description": "Filter by blockchain",
        "type": "string",
        "example": "Ethereum"
      },
      {
        "name": "blockchains",
        "description": "Filter by multiple blockchains",
        "type": "string",
        "example": "Ethereum,56"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/all",
    "description": "Get all crypto data with extra fields as needed",
    "parameters": [
      {
        "name": "fields",
        "description": "Comma-separated list of fields (contracts, blockchains, twitter, website, logo, price, market_cap, liquidity, volume)",
        "type": "string",
        "example": "blockchains,contracts"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/query",
    "description": "Query market data with filters",
    "parameters": [
      {
        "name": "filters",
        "description": "List of filters to apply (liquidity, market_cap, volume, price, price_change_24h)",
        "type": "string",
        "example": "liquidity:100:1000,market_cap:10000:100000"
      },
      {
        "name": "sortBy",
        "description": "Field to sort by",
        "type": "string",
        "example": "market_cap"
      },
      {
        "name": "sortOrder",
        "description": "Sort order (asc, desc)",
        "type": "string",
        "example": "desc"
      },
      {
        "name": "offset",
        "description": "The offset of the results",
        "type": "integer",
        "example": 0
      },
      {
        "name": "limit",
        "description": "The limit of the results",
        "type": "integer",
        "default": 20
      },
      {
        "name": "blockchain",
        "description": "Filter by blockchain",
        "type": "string",
        "example": "Ethereum"
      },
      {
        "name": "category",
        "description": "Filter by category",
        "type": "string",
        "example": "Cryptocurrency"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/wallet/transactions",
    "description": "Fetch transactions for a wallet",
    "parameters": [
      {
        "name": "wallet",
        "description": "The user wallet queried",
        "type": "string",
        "example": "0xd99cB89A20822B0448936DF4f36803778CA5a003"
      },
      {
        "name": "wallets",
        "description": "The user wallets queried (comma separated)",
        "type": "string",
        "example": "0xf23b38099188fd5892346104bBEF2F1c11D10244,0x554efD74C693999bABf7CC0f5646D465A31b32CB"
      },
      {
        "name": "from",
        "description": "Start of the timeframe for transactions (timestamp)",
        "type": "timestamp"
      },
      {
        "name": "to",
        "description": "End of the timeframe for transactions (timestamp)",
        "type": "timestamp"
      },
      {
        "name": "blockchains",
        "description": "Blockchains to fetch from (comma separated)",
        "type": "string",
        "example": "56,Ethereum"
      },
      {
        "name": "limit",
        "description": "Number of transactions to return per page",
        "type": "integer",
        "default": 50
      },
      {
        "name": "offset",
        "description": "Number of transactions to skip",
        "type": "integer",
        "default": 10
      },
      {
        "name": "order",
        "description": "Sort order",
        "type": "string",
        "options": ["asc", "desc"],
        "default": "asc"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/blockchain/pairs",
    "description": "Get pairs from a specific blockchain",
    "parameters": [
      {
        "name": "blockchain",
        "description": "The blockchain you want assets from",
        "type": "string",
        "required": true
      },
      {
        "name": "sortBy",
        "description": "The sort field",
        "type": "string",
        "options": [
          "latest_trade_date",
          "latest_price",
          "price_5min_ago",
          "price_1h_ago",
          "price_4h_ago",
          "price_24h_ago",
          "price_change_5min",
          "price_change_1h",
          "price_change_4h",
          "price_change_24h",
          "holders_count",
          "latest_market_cap",
          "price_1min_ago",
          "price_change_1min",
          "trades_1min",
          "trades_5min",
          "volume_1min",
          "volume_5min",
          "created_at",
          "market_cap"
        ]
      },
      {
        "name": "sortOrder",
        "description": "The sort order",
        "type": "string",
        "options": ["desc", "asc"]
      },
      {
        "name": "filters",
        "description": "Filters (comma separated). Available filters: latest_trade_datetimestamp, latest_price, price_5min_ago, price_1h_ago, price_4h_ago, price_24h_ago, price_change_5min, price_change_1h, price_change_4h, price_change_24h, holders_count, latest_market_cap, price_1min_ago, price_change_1min, trades_1min, trades_5min, volume_1min, volume_5min, created_at, market_cap",
        "type": "string",
        "example": "latest_price:0.1:1.0,volume_5min:1000:10000"
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  },
  {
    "endpoint": "/market/cefi/funding-rate",
    "description": "Get the funding rate for any cefi pair",
    "parameters": [
      {
        "name": "symbol",
        "description": "The symbol you want to get the funding rate for",
        "type": "string",
        "required": true
      }
    ],
    "stale": true,
    "ttl": 30,
    "publicApi": true
  }
]
